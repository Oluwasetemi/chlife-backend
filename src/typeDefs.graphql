scalar DateTime

enum UserEnum {
	INDIVIDUAL
	EMPLOYEE
	COMPANY
	SUPERADMIN
	ADMIN
}

enum UserEnumAlone {
	INDIVIDUAL
	EMPLOYEE
	COMPANY
}

enum GenderEnum {
	MALE
	FEMALE
}

enum SourceEnum {
	EMAIL
	GOOGLE
}

enum ActivityEnum {
	HIGH
	MEDIUM
	LOW
	VERYACTIVE
	SOMEWHATACTIVE
	LOWACTIVITY
}

enum HraInputSectionsEnum {
	TOS
	GENERAL
	COVID
	BASIC_INFORMATION
	BLOOD_PRESSURE
	DIABETES
	SMOKING
	DRIVING
	GENDER_SPECIFIC
	PREVENTION
	CHRONIC
	NUTRITION
	SUGAR
	SLEEP
	SOMATIC
	MEDICATIONS
	HEALTH_HISTORY
	COUGH_AND_HAND_HYGIENE
	MENTAL_HEALTH
	STRESS
	PHYSICAL
	TACTICAL
	OTHER
	DEMOGRAPHICS
	REVIEW
	MEDICAL_CONDITIONS
	FALLS
	IMMUNIZATIONS
	ACTIVITIES
	MOBILITY
	SUPPORT
	DENTAL_HEARING_VISION
	HOME_SAFETY
	NUTRITIONII
}

type Message {
	message: String
}

type Values {
	id: String!
	label: String
	hide: [String]
	show: [String]
}

type ShowHide {
	low: Int
	show: [String]
	high: Int
	hide: [String]
	sum: [String]
}

type QuestionInput {
	type: String!
	values: [Values]
	units: String
	min: Int
	max: Int
	showhide: [ShowHide]
	allow_decimals: Boolean
	maxvariable: Boolean
}

type Question {
	id: String!
	label: String!
	prompt: String!
	input: [QuestionInput!]!
	required: Boolean
	system_of_measurement: String
	counterpart: String
	default_deactive: Boolean
}

type Options {
	top_submit_button: Boolean
}

type HRA {
	id: String!
	label: String
	dynamic: String
	options: Options
	prompt: String
	q: [Question]
	qCount: Int
}

type User {
	name: String!
	email: String!
	mobile: String
	"""
	A secure password should possess characters 0-9, A-Z alphanumeric symbols
	"""
	password: String
	type: UserEnum!
	image: String
	gender: GenderEnum!
	nationality: String
	dob: DateTime
	createdAt: DateTime
	updatedAt: DateTime
	address: String
	token: String
	resetPasswordExpires: Int
	resetPasswordToken: String
	invitedBy: User
	adminVerified: Boolean
	source: SourceEnum
	suspended: Boolean
	company: String
	companyUrl: String
	size: Int!

	# total reward point for certain activities
	# totalRewardPoints: Int
	# weight: Int
	# height: Int
	# activity: ActivityEnum
	# Health risk assessment(2 per year, 1 every 6 month)
	# hra: [Hra]!
	# user schedule apointment (2 only - inBody and Professional)
	# appointments: [Appointment]
	# exercises: [Exercise]
	# mealPlan: MealPlan
	# inBody: [InBody]
}

type Query {
	"""
	Query to get the authenticated user
	"""
	me: User
	"""
	Fetch users
	"""
	users: [User]!
	"""
	Fetch users by their type: should be accessible
	"""
	usersByType(type: UserEnum): [User]!
}

input updateUserProfileInput {
	firstName: String!
	lastName: String!
	gender: GenderEnum!
	dob: DateTime!
	weight: Int
	height: Int
	company: String
	activity: ActivityEnum
	password: String!
}

input signUpEmployeeInput {
	firstName: String!
	lastName: String!
	email: String!
	gender: GenderEnum!
	dob: DateTime!
	weight: Int
	height: Int
	company: String
	activity: ActivityEnum
	password: String!
}

input signUpCompanyInput {
	firstName: String!
	lastName: String!
	organizationName: String!
	organizationEmail: String!
	organizationUrl: String
	organizationAddress: String
	organizationSize: Int!
	jobTitle: String!
}

type Mutation {
	"""
	Mutation to login a user
	"""
	login(email: String!, password: String!): User!
	"""
	Mutation to login a user putting into consideration userType
	"""
	loginWithUserType(
		email: String!
		password: String!
		accountType: UserEnum = INDIVIDUAL
	): User!
	"""
	Mutation to generate the google auth url the frontend can user to handle the google sign on for an individual
	"""
	generateGoogleAuthUrl: String!
	"""
	Mutation to complete the individual signup process by passing in a google code
	"""
	signupLoginWithGoogleCode(code: String): User!
	"""
	Mutation to complete the individual signup process by passing in a google access_token
	"""
	signupLoginWithGoogleAccessToken(access_token: String): User!
	"""
	OnBoard Employes, Individual should use this as their signup page
	"""
	signup(input: signUpEmployeeInput): User!
	"""
	Mutation to add new admin
	"""
	addNewAdmin(email: String): Message!
	"""
	Mutation to remove new admin
	"""
	removeNewAdmin(email: String): Message!
	"""
	this should only be used by a choose_life admin
	"""
	adminOnBoardCompany(input: signUpCompanyInput): User!
	"""
	OnBoard Company -> this can only be done by chooselife addmin
	"""
	registerCompany(input: signUpCompanyInput): Message!
	"""
	Mutation to initiate a password reset request
	"""
	requestResetPassword(email: String!): Message!
	"""
	Mutation to reset password
	"""
	resetPassword(
		resetToken: String!
		password: String
		confirmPassword: String
	): User!
	"""
	Mutation to fetch HRA question based on
	"""
	fetchHraQuestion(input: HraInputSectionsEnum): HRA!
}

# type Subscription {}
