scalar DateTime

enum UserEnum {
	INDIVIDUAL
	EMPLOYEE
	COMPANY
	SUPERADMIN
	ADMIN
}

enum UserEnumAlone {
	INDIVIDUAL
	EMPLOYEE
	COMPANY
}

enum GenderEnum {
	MALE
	FEMALE
}

enum SourceEnum {
	EMAIL
	GOOGLE
}

enum ActivityEnum {
	HIGH
	MEDIUM
	LOW
	VERYACTIVE
	SOMEWHATACTIVE
	LOWACTIVITY
}

enum HraInputSectionsEnum {
	ACTIVITIES
	BASIC_INFORMATION
	BLOOD_PRESSURE
	CHRONIC
	COUGH_AND_HAND_HYGIENE
	DEMOGRAPHICS
	DENTAL_HEARING_VISION
	DIABETES
	DRIVING
	FALLS
	GENDER_SPECIFIC
	GENERAL
	HEALTH_HISTORY
	HOME_SAFETY
	IMMUNIZATIONS
	MEDICAL_CONDITIONS
	MEDICATIONS
	MENTAL_HEALTH
	MOBILITY
	NUTRITION
	NUTRITIONII
	OTHER
	PHYSICAL
	PREVENTION
	REVIEW
	SLEEP
	SMOKING
	SOMATIC
	STRESS
	SUGAR
	SUPPORT
	TACTICAL
	TOS
	TOS_FITNESSFAIR
}

type Message {
	message: String
}

type Values {
	id: String!
	label: String
	hide: [String]
	show: [String]
}

type ShowHide {
	low: Int
	show: [String]
	high: Int
	hide: [String]
	sum: [String]
}

type QuestionInput {
	type: String!
	values: [Values]
	units: String
	min: Int
	max: Int
	showhide: [ShowHide]
	allow_decimals: Boolean
	maxvariable: Boolean
}

type Question {
	id: String
	label: String
	prompt: String
	input: [QuestionInput]
	required: Boolean
	system_of_measurement: String
	counterpart: String
	default_deactive: Boolean
}

type Options {
	top_submit_button: Boolean
}

type HRA {
	id: String!
	label: String
	dynamic: String
	options: Options
	prompt: String
	q: [Question]
	qCount: Int
}

type QuestionAndResponse {
	save_key: String
	sex: String
	body_frame_size: String
	height_feet: String
	height_inches: String
	height_cm: String
	weight_pounds: String
	weight_kg: String
	diabetes_status_yes: String
	diabetes_status: String
	stroke_yes: String
	stroke: String
	heart_attack_yes: String
	heart_attack: String
	heart_disease_yes: String
	heart_disease: String
	chh_hands: String
	chh_cough: String
	chh_fever: String
	chh_sbreath: String
	chh_interact: String
	blood_pressure_estimated: String
	cholesterol_check: String
	blood_pressure_medication: String
	blood_pressure_medication_1: String
	blood_pressure_measured_high_number: String
	blood_pressure_measured_low_number: String
	hb1ac_check: String
	hb1ac_level_percent: String
	smoking: String
	smoking_still_smoke: String
	still_smoke_cigarettes_day: String
	typical_travel_method: String
	driving_speed: String
	last_mammogram: String
	hysterectomy: String
	pap_smear_test: String
	colon_cancer_screening: String
	fast_food: String
	fruit: String
	vegetables: String
	soft_drinks: String
	protein: String
	junk_food: String
	desserts: String
	butter: String
	sleep1: String
	sleep2: String
	sleep3: String
	sleep4: String
	PHQa: String
	PHQb: String
	PHQc: String
	PHQd: String
	PHQe: String
	PHQf: String
	PHQg: String
	PHQh: String
	PHQi: String
	GADa: String
	GADb: String
	GADc: String
	GADd: String
	GADe: String
	GADf: String
	GADg: String
	felt_confident: String
	going_your_way: String
	unable_to_control: String
	difficulties_piling_up: String
	overall_health: String
	weekly_physical_activity: String
	bicycle_helmet_usage: String
	helmet_usage: String
	readiness_to_quit_smoking: String
	readiness_to_reduce_alcohol_usage: String
	readiness_to_eat_healthier: String
	readiness_to_exercise_more: String
	misfortune: String
	race: String
	hispanic_origin: String
	filling_forms: String
	education: String
	state_of_residence: String
	marital_status: String
	household_income: String
	insurance_coverage: String
}

type Hra {
	_id: String!
	questionAndResponse: QuestionAndResponse
	ghmReference: String
	createdAt: DateTime
	updatedAtAt: DateTime
}

type InBodyStructure {
	value: String!
}

type InBody {
	_id: String!
	inBodyData: InBodyStructure
	inBodyReference: String
	createdAt: DateTime
	updatedAtAt: DateTime
}

type Appointment {
	_id: String!
	subject: String
	description: String
	appointmentTime: String
	type: String
	professsional: String
	createdAt: DateTime
	updatedAtAt: DateTime
}

type ExerciseBody {
	value: String!
}

type Exercise {
	_id: String!
	title: String
	description: String
	body: ExerciseBody
	type: String
	category: String
	advice: String
	createdAt: DateTime
	updatedAtAt: DateTime
}

type MealPlanStructure {
	value: String!
}

type MealPlan {
	_id: String!
	title: String
	description: String
	meealPlanStructure: MealPlanStructure
	type: String
	category: String
	advice: String
	createdAt: DateTime
	updatedAtAt: DateTime
}

type User {
	_id: String!
	name: String!
	email: String!
	mobile: String
	"""
	A secure password should possess characters 0-9, A-Z alphanumeric symbols
	"""
	password: String
	type: UserEnum!
	image: String
	gender: GenderEnum!
	nationality: String
	dob: DateTime
	createdAt: DateTime
	updatedAt: DateTime
	address: String
	token: String
	resetPasswordExpires: Int
	resetPasswordToken: String
	invitedBy: User
	adminVerified: Boolean
	source: SourceEnum
	suspended: Boolean
	company: String
	companyUrl: String
	size: Int!
	"""
	total reward point for certain activities
	"""
	totalRewardPoints: Int
	weight: Int
	height: Int
	activity: ActivityEnum
	"""
	Health risk assessment(2 per year, 1 every 6 month)
	"""
	hra: [Hra]!
	"""
	user schedule apointment (2 only - inBody and Professional)
	"""
	appointments: [Appointment]
	exercises: Exercise
	mealPlan: MealPlan
	inBody: [InBody]
}

type Asset {
	name: String
	url: String
}

type Contentful {
	id: String!
	title: String!
	body: String!
	createdAt: DateTime
	tags: String
	author: String!
	authorRole: String
	asset: Asset
}

type Query {
	"""
	Query to get the authenticated user
	"""
	me: User
	"""
	Fetch users
	"""
	users: [User]!
	"""
	Fetch users by their type: should be accessible
	"""
	usersByType(type: UserEnum): [User]!
	"""
	Fetch user by id: should be accessible
	"""
	userById(id: String): User!
	"""
	Fetch All Blogpost
	"""
	fetchAllBlogPostByCount(first: Int!): [Contentful]
	"""
	Fetch contentful blog post by count
	"""
	fetchBlogPostByCount: [Contentful]
	"""
	Fetch contentful blog post by latest
	"""
	fetchBlogPostByLatest(count: Int!): [Contentful]
	"""
	Fetch similar contentful blog post by tags
	"""
	fetchSimilarBlogPostByLatest(tag: String!): [Contentful]
	"""
	Fetch a single blogpost
	"""
	fetchOneBlogPost: Contentful
	"""
	Mutation to fetch HRA question based on
	"""
	fetchHraQuestion(input: HraInputSectionsEnum): HRA!
	"""
	Fetch the current response of the user currently logged in
	"""
	currentUserResponse: Hra
}

input updateUserProfileInput {
	firstName: String!
	lastName: String!
	gender: GenderEnum!
	dob: DateTime!
	weight: Int
	height: Int
	company: String
	activity: ActivityEnum
	password: String!
}

input signUpEmployeeInput {
	firstName: String!
	lastName: String!
	email: String!
	gender: GenderEnum!
	dob: DateTime!
	weight: Int
	height: Int
	company: String
	activity: ActivityEnum
	password: String!
}

input signUpCompanyInput {
	firstName: String!
	lastName: String!
	organizationName: String!
	organizationEmail: String!
	organizationUrl: String
	organizationAddress: String
	organizationSize: Int!
	jobTitle: String!
}

enum stageEnum {
	RESPONSE
	UPDATE_RESPONSE
	PREVIEW
	SUBMIT
	SUBMITTED
}

input HRAResponseInput {
	stage: stageEnum!
	save_key: String
	sex: String
	body_frame_size: String
	height_feet: String
	height_inches: String
	height_cm: String
	weight_pounds: String
	weight_kg: String
	diabetes_status_yes: String
	diabetes_status: String
	stroke_yes: String
	stroke: String
	heart_attack_yes: String
	heart_attack: String
	heart_disease_yes: String
	heart_disease: String
	chh_hands: String
	chh_cough: String
	chh_fever: String
	chh_sbreath: String
	chh_interact: String
	blood_pressure_estimated: String
	cholesterol_check: String
	blood_pressure_medication: String
	blood_pressure_medication_1: String
	blood_pressure_measured_high_number: String
	blood_pressure_measured_low_number: String
	hb1ac_check: String
	hb1ac_level_percent: String
	smoking: String
	smoking_still_smoke: String
	still_smoke_cigarettes_day: String
	typical_travel_method: String
	driving_speed: String
	last_mammogram: String
	hysterectomy: String
	pap_smear_test: String
	colon_cancer_screening: String
	fast_food: String
	fruit: String
	vegetables: String
	soft_drinks: String
	protein: String
	junk_food: String
	desserts: String
	butter: String
	sleep1: String
	sleep2: String
	sleep3: String
	sleep4: String
	PHQa: String
	PHQb: String
	PHQc: String
	PHQd: String
	PHQe: String
	PHQf: String
	PHQg: String
	PHQh: String
	PHQi: String
	GADa: String
	GADb: String
	GADc: String
	GADd: String
	GADe: String
	GADf: String
	GADg: String
	felt_confident: String
	going_your_way: String
	unable_to_control: String
	difficulties_piling_up: String
	overall_health: String
	weekly_physical_activity: String
	bicycle_helmet_usage: String
	helmet_usage: String
	readiness_to_quit_smoking: String
	readiness_to_reduce_alcohol_usage: String
	readiness_to_eat_healthier: String
	readiness_to_exercise_more: String
	misfortune: String
	race: String
	hispanic_origin: String
	filling_forms: String
	education: String
	state_of_residence: String
	marital_status: String
	household_income: String
	insurance_coverage: String
}

type Mutation {
	"""
	Mutation to login a user
	"""
	login(email: String!, password: String!): User!
	"""
	Mutation to login a user putting into consideration userType
	"""
	loginWithUserType(
		email: String!
		password: String!
		accountType: UserEnum = INDIVIDUAL
	): User!
	"""
	Mutation to generate the google auth url the frontend can user to handle the google sign on for an individual
	"""
	generateGoogleAuthUrl: String!
	"""
	Mutation to complete the individual signup process by passing in a google code
	"""
	signupLoginWithGoogleCode(code: String): User!
	"""
	Mutation to complete the individual signup process by passing in a google access_token
	"""
	signupLoginWithGoogleAccessToken(access_token: String): User!
	"""
	OnBoard Employes, Individual should use this as their signup page
	"""
	signup(input: signUpEmployeeInput): User!
	"""
	Mutation to add new admin
	"""
	addNewAdmin(email: String): Message!
	"""
	Mutation to remove new admin
	"""
	removeNewAdmin(email: String): Message!
	"""
	this should only be used by a choose_life admin
	"""
	adminOnBoardCompany(input: signUpCompanyInput): User!
	"""
	OnBoard Company -> this can only be done by chooselife addmin
	"""
	registerCompany(input: signUpCompanyInput): Message!
	"""
	Mutation to initiate a password reset request
	"""
	requestResetPassword(email: String!): Message!
	"""
	Mutation to reset password
	"""
	resetPassword(
		resetToken: String!
		password: String
		confirmPassword: String
	): User!

	"""
	resend reset password email
	"""
	resendResetPasswordRequestMail(
		email: String
		resetPasswordToken: String
	): Message!
	"""
	submit HRA response
	"""
	submitHRAResponse(input: HRAResponseInput): Message!
}

# type Subscription {}
